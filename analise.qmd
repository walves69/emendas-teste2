---
title: "Emendas Parlamentares"
format:
  html:
    code-fold: true
jupyter: python3
---

Dados das emendas retirados do [Painel de Emendas Parlamentares](https://portaldatransparencia.gov.br/emendas)

For a demonstration of a line plot on a polar axis, see @fig-polar.

```{python}
#| label: fig-polar
#| fig-cap: "A line plot on a polar axis"

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(
  subplot_kw = {'projection': 'polar'} 
)
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```

Importação das biliotecas

```{python}
import pandas as pd
import numpy as np
import plotly.express as px
from babel.numbers import format_currency

# retirar a notação científica do pandas
# pd.set_option('display.float_format', '{:.2f}'.format)
```

## Estrutura

### Carregando dados

```{python}
df = pd.read_csv('emendas.csv', sep=';')
df.info()
```

### Selecionando colunas

Escolhendo as colunas Autor da emenda, Localidade do gasto, Valor empenhado, Valor liquidado, Valor pago, Valor Restos a Pagar Inscritos, Valor Restos a Pagar Cancelados, Valor Restos a Pagar Pagos.

```{python}
df = df.iloc[:, [2,4,11,12,13,14,15,16]]
df.info()
```

### Renomeando colunas

```{python}
# Renomeando as colunas pra trabalhar mais facilmente
df.columns = ['emenda_autor','local_gasto','vlr_empenhado','vlr_liquido','vlr_pago','vlr_restos_pagar_inscrito'
              ,'vlr_restos_pagar_cancelados','vlr_restos_pagar_pagos']
df.head()
```

### Convertendo valores

As colunas de valores hoje estão como tipo de dado , texto. Precisam ser convertidas para float. Para isso preciso deixar o valor numérico puro, então vou subtituir o caracter `.` por nada, e depois o separador `,` por `.` .

```{python}
def convert_to_float(x):
    return float(x.replace(".","").replace(",","."))

# buscar todas as colunas começadas com vlr_
# e aplicar a função de conversão
prefix = 'vlr_'

# colunas começadas com vlr_
colunas = [col for col in df if col.startswith(prefix)]

# aplicando a função
for coluna in colunas:
    df[coluna] = df[coluna].map(lambda x: convert_to_float(x))


# verificando como ficou
df.info()
```

### Ajustando valor pago

A emenda pode ter sido paga, então `vlr_pago > 0`; pode ter ido para restos a pagar, então `vlr_restos_pagar_pagos > 0`, ou ainda não ter sido paga. Estamos interessados nas que foram pagas (`vlr_pago > 0 ou vlr_restos_pagar_pagos > 0`).

```{python}
# Criar nova coluna segundo a regra acima
# significa que aquela emanda foi paga
df['vlr'] = df['vlr_pago']+df['vlr_restos_pagar_pagos']

# Apenas as emendas que foram pagas, valor final > 0
df = df[df['vlr']>0]

# selecionar apenas colunas de interesse
df = df[['emenda_autor','local_gasto','vlr']]
df.head()
```

## Emendas 

### Emendas Estaduais

Listar emendas enviadas apenas para estados, valume recebido e quantidade de políticos que realizaram o envio.

```{python}
# Selecionando as emendas estaduais
# Emendas enviadas por estados terminam com (UF)
emendas_estaduais = df.loc[df['local_gasto'].str.contains('(UF)',regex=False), ['local_gasto', 'vlr','emenda_autor']]


# Agrupando os dados para contar
# quanto foi enviado e quantos políticos enviaram
emendas_estaduais = (
    emendas_estaduais.groupby('local_gasto')
    .agg({'local_gasto':'count', 'vlr': 'sum', 'emenda_autor':pd.Series.nunique})
    .rename(columns={'local_gasto':'Emendas', 'emenda_autor':'Políticos'})
    .reset_index()
)


# retirando a marcação (UF) do nome do estado.
emendas_estaduais["local_gasto"] = emendas_estaduais["local_gasto"].apply(lambda x: x.replace(" (UF)", ""))

# renomeando a coluna local_gasto
emendas_estaduais.rename(columns={'local_gasto':'Estado', 'vlr':'Valor'}, inplace=True)

# formatando o valor como real
# desvantagem, fica como string
emendas_estaduais["Valor R$"] = emendas_estaduais["Valor"].apply(lambda x: format_currency(x, currency="BRL", locale="pt_BR"))

emendas_estaduais[['Estado','Políticos','Emendas','Valor R$']].head()
# emendas_estaduais
```

Criando um treemap para ver melhor os dados. Primerimente quero que os valores sejam exibidos da seguinte forma: 1000 será 1K, 1000000 será 1M, etc. Para isto crio uma função que reliza essa conversão e crio uma nova coluna no DataFrame.

```{python}
# apresentar os valores no formato 1K, 1M, 1B
def f(row):
    if row['Valor'] >= 10**9:
        val = row['Valor']/10**9
        val = '{0:.2f}B'.format(val)
    elif row['Valor'] >= 10**6 and row['Valor'] < 10**9:
        val = row['Valor']/10**6
        val = '{0:.2f}M'.format(val)
    elif row['Valor'] >= 10**3 and row['Valor'] < 10**6:
        val = row['Valor']/10**3
        val = '{0:.2f}K'.format(val)
    else:
        val = '{0:.2f}'.format(row['Valor'])
    return val

emendas_estaduais['vlr_prty'] = emendas_estaduais.apply(f, axis=1)
emendas_estaduais.head(3)

# treemap com os valores por estado
# fig1 = px.treemap(emendas_estaduais, path=[px.Constant("Brasil"), "Estado"], values="vlr", color="vlr", color_continuous_scale='viridis')
# fig1.update_traces(
# text=emendas_estaduais['vlr_prty'],
# textinfo="label+text+percent root", root_color="lightgrey", selector=dict(type='treemap')
# , name="asdasdasd", opacity=0.75
# )
# fig1.show()
```


Criando o gráfico.


```{python}
#| label: fig-treemap_estados
#| fig-cap: "Emendas por estado"


# treemap com os valores por estado
fig1 = px.treemap(emendas_estaduais, path=[px.Constant("Brasil"), "Estado"], values="Valor", color="Valor", color_continuous_scale='viridis')
fig1.update_traces(
text=emendas_estaduais['vlr_prty'],
textinfo="label+text+percent root", root_color="lightgrey", selector=dict(type='treemap')
,opacity=0.75
)
fig1.show()
```

### Emendas do Ceará

```{python}

# Dados do estado do ceará e de suas cidades
def separar_dados_ce(df):
    # emenda direto pro estado do Ceará
    df_estado = df.loc[df['local_gasto']=='CEARÁ (UF)']

    # emendas para as cidade tem a marcação "- CE"
    df_cidades = df.loc[df['local_gasto'].str.contains('- CE')]

    # limpando o nome das cidades, retirando a marcação "- CE"
    # df_cidades['local_gasto'] = df_cidades["local_gasto"].apply(lambda x: x.replace(" - CE", ""))
    
    # df_ce = pd.concat([df_estados, df_cidades], axis=0)
    # df_ce = df_ce[['emenda_autor', 'local_gasto','vlr','vlr_empenhado','vlr_liquido','vlr_pago','vlr_restos_pagar_inscrito','vlr_restos_pagar_cancelados','vlr_restos_pagar_pagos']]
    # df_ce = pd.DataFrame(df_ce).sort_values(by=['vlr'], ascending=False)
    # return df_ce
    return df_estado.reset_index(drop=True), df_cidades.reset_index(drop=True)

df_ce, df_cidades = separar_dados_ce(df)
# df_cidades.head()

# limpando o nome das cidades
df_cidades['local_gasto'] = df_cidades["local_gasto"].apply(lambda x: x.replace(" - CE", ""))
df_ce.head()
```

### Cidades Recebedoras

Cidades que receberam emendas.

```{python}
def cidades_emendas(df_ce):
    locais = sorted(df_ce['local_gasto'].unique())
    locais = pd.DataFrame({'cidade':locais})
    return locais


def espalhar_cidades(series):
    # Create a pandas Series
    # Number of columns
    n = 5

    # Calculate the number of rows needed
    num_rows = int(np.ceil(len(series) / n))

    # Pad the Series with NaN values if necessary
    padded_series = np.pad(series, (0, num_rows * n - len(series)), constant_values='')

    # Reshape the Series and convert it to a DataFrame
    reshaped_array = padded_series.reshape(num_rows, n)
    return pd.DataFrame(reshaped_array)


locais = cidades_emendas(df_cidades)

#limpando o nome das cidades
# locais['cidade'] = locais["cidade"].apply(lambda x: x.replace(" - CE", ""))
locais


# quero espalhar esta lista num dataframe para visualizar melhor
df_locais = espalhar_cidades(locais['cidade'])

df_locais.style \
.set_caption("Outliers identificados") 

```


### Cidade e valor recebido

Quanto cada cidade recebeu e de quantos políticos diferentes.

```{python}

cidades_emendas_df = (
    df_cidades
    .groupby('local_gasto', as_index=False)
    .agg({'emenda_autor':pd.Series.nunique, 'vlr': 'sum'})
    .reset_index(drop=True)
)



cidades_emendas_df.rename(
    columns={'local_gasto':'Cidade', 'emenda_autor':'Políticos', 'vlr':'Valor'}
    , inplace=True)



cidades_emendas_df["Valor (R$)"] = cidades_emendas_df["Valor"].apply(lambda x: format_currency(x, currency="BRL", locale="pt_BR"))
cidades_emendas_df['vlr_prty'] = cidades_emendas_df.apply(f, axis=1)

cidades_emendas_df.head()
```

Criando treemap.

```{python}
#| label: fig-treemap-cidades
#| fig-cap: "Emendas por cidade"

fig2 = px.treemap(cidades_emendas_df, path=[px.Constant("Cidades do Ceará"),"Cidade"], values="Valor", color="Valor", color_continuous_scale='viridis')
fig2.update_traces(
    text=cidades_emendas_df['vlr_prty'],
    textinfo="label+text", 
    selector=dict(type='treemap'), 
    opacity=0.75
)
fig2.show()
```


### Outliers

Dados no formato de boxplot. Não agregado para poder verificar outliers.


```{python}
#| label: fig-boxplot-cidades
#| fig-cap: "Emendas por cidade - boxplot"

fig3 = px.box(df_cidades, x="vlr")
fig3.show()
```


Identificando os outliers.


```{python}
def identificar_limites(serie_coluna):
    # Calcular os quartis Q1 e Q3
    Q1 = serie_coluna.quantile(0.25)
    Q3 = serie_coluna.quantile(0.75)

    # Calcular o IQR
    IQR = Q3 - Q1

    # Definir os limites inferior e superior
    limite_inferior = Q1 - 1.5 * IQR
    limite_superior = Q3 + 1.5 * IQR
    return limite_inferior, limite_superior

def get_outliers(df,coluna):
    limite_inferior,limite_superior = identificar_limites(df[coluna])
    outliers = df[(df[coluna] < limite_inferior) | (df[coluna] > limite_superior)]
    return outliers.sort_values(by='vlr', ascending=False)
    # return outliers


def get_noutliers(df,coluna):
    limite_inferior,limite_superior = identificar_limites(df[coluna])
    outliers = df[~((df[coluna] < limite_inferior) | (df[coluna] > limite_superior))]
    return outliers.sort_values(by='vlr', ascending=False)
    # return outliers


# Identificar outliers
outliers = get_outliers(df_cidades,'vlr')

outliers = outliers[['emenda_autor','local_gasto','vlr']]
outliers = outliers.rename(columns={'emenda_autor':'Político','local_gasto':'Cidade'})

outliers["Valor"] = outliers["vlr"].apply(lambda x: format_currency(x, currency="BRL", locale="pt_BR"))
outliers = outliers[['Político','Cidade','Valor']]

outliers.style \
.set_caption("Outliers identificados") \
.format(precision=2, thousands=".", decimal=",") 
```


### Políticos

Políticos que enviaram para quais cidades e qual valor.


```{python}
politicos_df = (
    df_cidades
    .groupby(['emenda_autor'], as_index=False)
    .agg({'local_gasto':pd.Series.nunique, 'vlr': 'sum'})
)


# politicos_df = politicos_df.sort_values(by='vlr', ascending=False)
politicos_df.rename(columns={'emenda_autor':'Autor', 'local_gasto':'Cidades Recebedoras','vlr':'Valor'}, inplace=True)



politicos_df.style \
.set_caption("Emendas por Político") \
.format(precision=2, thousands=".", decimal=",") \
.background_gradient(subset=["Valor"],cmap="viridis") \
.highlight_max(subset=["Cidades Recebedoras"], color='yellow', axis=0, props=None)
```